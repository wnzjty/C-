#ifndef __ADD_H__   判断如果没有定义add，条件为真就执行下面，防止多次调用
#define __ADD_H__
#endif

八、函数递归
通俗来讲：函数自己调用自己叫递归。
程序调用自身的编程技巧称为递归（recursion）
递归的主要思考方式在于：把大事化小
1.直接或间接调用自身的一种方法
2.把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解
3.递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算
递归的常见错误：栈溢出（Stack overflow）
一块内存1.栈区     局部变量   函数形参   函数调用
             2.堆区    动态开辟的内存   malloc  calloc
             3.静态区 全局变量 static 修饰的变量
 
递归的两个必要条件
1.存在限制调节，但满足这个限制条件的时候，递归便不再继续
2.每次递归调用之后越来越接近这个限制条件

strlen recursion
int my_strlen(char* str)
{
	if (*str != '\0')
	{
		return 1 + my_strlen(str + 1);
	}
	else
		return 0;
}

int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);
	printf("len = %d ", len);
	return 0;
}

printf recursion
void print(int n)
{
	if (n > 9)
		print(n / 10);
	printf("%d ", n % 10);
}

int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	print(num);
}

Simplest recursion
int main()
{
	printf("hehe\n");
	main();
	return 0;
}
