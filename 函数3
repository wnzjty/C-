binary_search( ); （二进制；查找）

五、函数调用

六、函数的嵌套调用和链式访问
嵌套调用：函数和函数之间可以有机的组合的。
链式访问：把一个函数的返回值作为另外一个函数的参数。

七、函数的声明和定义
函数的声明add.h
1.告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。但是具体是不是存在，无关紧要。
2.函数的声明一般出现在函数的使用之前。要满足先声明后使用。
3.函数的声明一般要放在头文件中的。  
函数的定义add.c
函数的定义是指函数的具体实现，交代函数的功能实现。
引用 #include ”add.h"

int main()
{
	printf("%d ", printf("%d", printf("%d", 43)));
	return 0;
}

void Add(int* p)
{
	++* p;
}

int main()
{
	int num = 0;
	Add(&num);
	printf("%d\n", num);
	Add(&num);
	printf("%d\n", num);
	Add(&num);
	printf("%d\n", num);
	return 0;
}

int binary_search(int arr[], int k, int sz)
{
	int left = 0;
	int right = sz - 1;
	while(left<=right)
	{ 
		int mid = (left + right) / 2;
		if (k > arr[mid])
		{
			left = mid + 1;
		}
		else if (k < arr[mid])
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}

int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 4;
	int sz = sizeof(arr) / sizeof(arr[0]);
	printf("%d\n", sz);
	int ret = binary_search(arr, k, sz);
	if (ret == -1)
		printf("找不到\n");
	else
		printf("找到了，下标是：%d\n", ret);
	return 0;
}

int binary_search(int arr[], int k, int sz)
{
	int i = 0;
	
	for (i = 0; i <= sz; i++)
	{
		if (k == arr[i])
			return i;
	}
	return -1;
}

int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 4;
	int sz = sizeof(arr) / sizeof(arr[0]);
	printf("%d\n", sz);
	int ret = binary_search(arr, k, sz);
	if (ret == -1)
		printf("找不到\n");
	else
		printf("找到了，下标是：%d\n",ret);
	return 0;
}
